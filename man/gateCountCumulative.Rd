% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gateCounts.R
\name{gateCountCumulative}
\alias{gateCountCumulative}
\title{Calculates Cumulative Daily Visitor Counts From Gate Counts}
\usage{
gateCountCumulative(
  rawGateCounts,
  gateType = "Unidirectional",
  gatecounterMaxValue = 999999,
  printMessages = TRUE
)
}
\arguments{
\item{rawGateCounts}{A numeric vector of length corresponding to days or
are present.}

\item{gateType}{A character string with options "Unidirectional" or}

\item{gatecounterMaxValue}{A numeric value greater than 0 indicating the
gate counter max value, before it is reset. The default value is
999,999.}

\item{printMessages}{An logical indicating TRUE or FALSE as to whether
progress messages should be printed. The default value is TRUE. Setting
to FALSE will remove messages from being shown.}
}
\value{
Returns an S3 object of class InfCriteria with results.
\itemize{
  \item adjustedCountSum - Sum of daily gate counts for the period,
        adjusted for issues mentioned under details. If gateType was
        "Bidirectional", the final resulting number would be divided
        by two.
  \item unadjustedDailyCounts - A vector of daily counts, not adjusted
        for gate type. If "Bidirectional" gate type, then would need to
        sum this vector and divide by two at the end.
  \item gateType - Gate type for which counts are provided by the user.
}
}
\description{
A function that calculates cumulative visitor counts, provided a numeric
vector or a tibble containing values of raw daily gate counts. The
function adjusts for several factors outlined under details (see README
file for examples). This function was developed to improve current
methodologies for calculating cumulative gate counts.
}
\details{
The function requires directionality of the gates for which
   the daily counts are provided (called gate type). If unidirectional
   no adjustments are done. If bidirectional, the cumulative sum at
   the end will be divided by two. Testing has shown that this method
   of dividing at the end will help reduce issues with counts
   that result from division of daily counts by two and rounding up or
   down. Further, negative counts can result during calculation if
   the counter has reset or if a lower value has been entered compared
   to previous day. This function attempts to correct for both scenarios.
   In the case of counter reset, the 'gatecounterMaxValue' argument
   provided by the user will be used to calculate the corrected value.
   In the case of a lower value being entered compared to previous day,
   the negative value will be replaced by NA. For next day, the count is
   calculated by the numeric value previously reported prior to NA, that
   must be higher than current value. The function also ensure counts
   for empty cells (when the count was forgotten to be reported) are
   accounted for. All scenarios are explained with images on the tutorial.
}
\examples{
# Example 1: Unidirectional gates with daily counts
randomCounts1 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                       200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

randomCountsSumEx1 <- gateCountCumulative(
             rawGateCounts = randomCounts1,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000)
randomCountsSumEx1$adjustedCountSum # access cumulative count

# Example 2: Unidirectional gates with random NA values
randomCounts2 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                       200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# randomly introduce NA and "Gate broken" entries
randomPositions <- sample(x = c(1:length(randomCounts2)),
                         size = 8, replace = FALSE)
randomCounts2[randomPositions[1:4]] <- NA
randomCounts2[randomPositions[5:8]] <- "Gate broken"

randomCountsSumEx2 <- gateCountCumulative(
             rawGateCounts = randomCounts2,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000)
randomCountsSumEx2$adjustedCountSum # access cumulative count

# Example 3: Unidirectional gates with random entry errors
randomCounts3 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                       200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# randomly introduce smaller counts
randomPositions <- sample(x = c(1:length(randomCounts3)),
                         size = 4, replace = FALSE)
randomCounts3[randomPositions] <- randomCounts3[randomPositions[1:4]] - 10

randomCountsSumEx3 <- gateCountCumulative(
             rawGateCounts = randomCounts3,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000)
randomCountsSumEx3$adjustedCountSum # access cumulative count

# Example 4: Bidirectional gates with NA values
randomCounts4 <- c(sort(rpois(n = 50, lambda = 10000)),
                  sort(rpois(n = 50, lambda = 400000)),
                  sort(rpois(n = 82, lambda = 800000)),
                       999999, # max value
                  sort(rpois(n = 50, lambda = 10000)),
                  sort(rpois(n = 50, lambda = 450000)),
                  sort(rpois(n = 50, lambda = 850000)))

# randomly introduce NA and "Gate broken" entries
randomPositions <- sample(x = c(1:length(randomCounts2)),
                         size = 8, replace = FALSE)
randomCounts4[randomPositions[1:4]] <- NA
randomCounts4[randomPositions[5:8]] <- "Gate broken"

randomCountsSumEx4 <- gateCountCumulative(
             rawGateCounts = randomCounts4,
             gateType = "Bidirectional",
             gatecounterMaxValue = 999999)
randomCountsSumEx4$adjustedCountSum # access cumulative count

}
\references{
MÃ¼ller K, Wickham H (2022). _tibble: Simple Data Frames_. R
package version 3.1.8, \href{https://CRAN.R-project.org/package=tibble}{Link}.

Google. (2022, February 14). Cleaning up gate count statistics.
Google Groups. Retrieved September 26, 2022,
\href{https://groups.google.com/a/arl.org/g/arl-assess/c/JQyllZN4gaE}{Link}.
}
\author{
Anjali Silva, \email{anjali@alumni.uoguelph.ca}
}
