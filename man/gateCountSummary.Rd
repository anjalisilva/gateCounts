% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gateCountsCalculation.R
\name{gateCountSummary}
\alias{gateCountSummary}
\title{Calculates Visitor Count Summaries From Daily Gate Counts}
\usage{
gateCountSummary(
  rawGateCounts,
  gateType = "Unidirectional",
  gatecounterMaxValue = 999999,
  printMessages = TRUE
)
}
\arguments{
\item{rawGateCounts}{A numeric vector or a tibble, with number of rows
equaling to length of days and columns equaling to two, such that
the dimension is: days x 2. Here days is the number of days for
which raw gate counts are present. First column must contain the
dates and should contain column name "dates". Dates must be in the
format of date-month-year. The second column must contain the gate
count reading for the given date and should be called "counts".}

\item{gateType}{A character string with options "Unidirectional" or}

\item{gatecounterMaxValue}{A numeric value greater than 0 indicating the
gate counter max value, before it is reset. The default value is
999,999. This number is crucial for calculations.}

\item{printMessages}{An logical indicating TRUE or FALSE as to whether
progress messages should be printed. The default value is TRUE. Setting
to FALSE will remove messages from being shown.}
}
\value{
Returns an S3 object of class InfCriteria with results.
\itemize{
  \item cumulativeCount - Sum of daily gate counts for the period,
        adjusted for issues mentioned under details. If gateType was
        "Bidirectional", the final resulting number would be divided
        by two.
  \item dailyCounts - Daily gate counts for the period, adjusted
        for issues mentioned under details. If gateType was
        "Bidirectional", the visitor count is divided by
        two and ceiling() function from base R is applied.
  \item monthlyCounts - Monthly gate counts for the period, adjusted
        for issues mentioned under details.
  \item gateType - Gate type for which counts are provided by the user.
  \item busiestMonth - Month with the highest visitor count.
  \item leastBusiestMonth - Month with the least visitor count.
  \item busiestDay - Day with the highest visitor count. There
        maybe multiple dates.
  \item leastBusiestDay - Day with the lowest visitor count. There
        maybe multiple dates.
}
}
\description{
A function that calculates, daily, monthly and cumulative visitor
counts, provided a numeric vector or a tibble containing values
of raw daily gate counts with a specific format (see argument details).
The function adjusts for several factors outlined under details (see README
file for examples). This function was developed to improve current
methodologies for calculating visitor counts from gate counts.
}
\details{
The function requires directionality of the gates for which
   the daily counts are provided (called gate type). If unidirectional
   no adjustments are done. If bidirectional, the cumulative sum at
   the end will be divided by two. Testing has shown that this method
   of dividing at the end will help reduce issues with counts
   that result from division of daily counts by two and rounding up or
   down. Further, negative counts can result during calculation if
   the counter has reset or if a lower value has been entered compared
   to previous day. This function attempts to correct for both scenarios.
   In the case of counter reset, the 'gatecounterMaxValue' argument
   provided by the user will be used to calculate the corrected value.
   In the case of a lower value being entered compared to previous day,
   the negative value will be replaced by NA. For next day, the count is
   calculated by the numeric value previously reported prior to NA, that
   must be higher than current value. The function also ensure counts
   for empty cells (when the count was forgotten to be reported) are
   accounted for. All scenarios are explained with images on the tutorial.
}
\examples{

set.seed(1234)
# Example 1: Unidirectional gates with daily counts
randomCounts1 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                  200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

randomCounts1tibble <- tibble::tibble(
                        dates = seq(lubridate::dmy('01-01-2022'),
                        lubridate::dmy('31-12-2022'),
                        by='1 day')[1:length(randomCounts1)] \%>\%
                        format('\%d-\%m-\%Y'),
                        counts = randomCounts1)

# check max value for gate counter maximum
max(randomCounts1tibble$counts, na.rm = TRUE) # 200000

randomCountsSumEx1 <- gateCountSummary(
             rawGateCounts = randomCounts1tibble,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000,
             printMessages = FALSE)
randomCountsSumEx1$dailyCounts # access daily adjusted counts
randomCountsSumEx1$monthlyCounts # access monthly adjusted counts
randomCountsSumEx1$busiestMonth # busiest month
randomCountsSumEx1$leastBusiestMonth # least busiest month
randomCountsSumEx1$busiestDay # busiest day


# Example 2: Unidirectional gates with random NA values
randomCounts2 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                       200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# randomly introduce NA and "Gate broken" entries
randomPositions <- sample(x = c(1:length(randomCounts2)),
                         size = 8, replace = FALSE)
randomCounts2[randomPositions[1:4]] <- NA
randomCounts2[randomPositions[5:8]] <- "Gate broken"

randomCounts2tibble <- tibble::tibble(
                        dates = seq(lubridate::dmy('01-01-2022'),
                        lubridate::dmy('31-12-2022'),
                        by='1 day')[1:length(randomCounts2)] \%>\%
                        format('\%d-\%m-\%Y'),
                        counts = randomCounts2)

# check max value for gate counter maximum
max(as.numeric(randomCounts2tibble$counts), na.rm = TRUE) # 200000

randomCountsSumEx2 <- gateCountSummary(
             rawGateCounts = randomCounts2tibble,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000,
             printMessages = FALSE)
randomCountsSumEx2$dailyCounts # access daily adjusted counts
randomCountsSumEx2$monthlyCounts # access monthly adjusted counts
randomCountsSumEx2$busiestMonth # busiest month
randomCountsSumEx2$leastBusiestMonth # least busiest month
randomCountsSumEx2$busiestDay # busiest day



# Example 3: Unidirectional gates with random entry errors
randomCounts3 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                       200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# randomly introduce smaller counts
randomPositions <- sample(x = c(1:length(randomCounts3)),
                         size = 4, replace = FALSE)
randomCounts3[randomPositions] <- randomCounts3[randomPositions[1:4]] - 10

randomCountsSumEx3 <- gateCountCumulative(
             rawGateCounts = randomCounts3,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000)
randomCountsSumEx3$adjustedCountSum # access cumulative count
# Cumulative (adjusted) sum for gate type unidirectional is 300673


# Example 4: Bidirectional gates with NA values
randomCounts4 <- c(sort(rpois(n = 50, lambda = 10000)),
                  sort(rpois(n = 50, lambda = 400000)),
                  sort(rpois(n = 82, lambda = 800000)),
                       999999, # max value
                  sort(rpois(n = 50, lambda = 10000)),
                  sort(rpois(n = 50, lambda = 450000)),
                  sort(rpois(n = 50, lambda = 850000)))

# randomly introduce NA and "Gate broken" entries
randomPositions <- sample(x = c(1:length(randomCounts4)),
                         size = 8, replace = FALSE)
randomCounts4[randomPositions[1:4]] <- NA
randomCounts4[randomPositions[5:8]] <- "Gate broken"

randomCountsSumEx4 <- gateCountCumulative(
             rawGateCounts = randomCounts4,
             gateType = "Bidirectional",
             gatecounterMaxValue = 999999)
randomCountsSumEx4$adjustedCountSum # access cumulative count
# Cumulative (adjusted) sum for gate type bidirectional is 921027

}
\references{
MÃ¼ller K, Wickham H (2022). _tibble: Simple Data Frames_. R
package version 3.1.8, \href{https://CRAN.R-project.org/package=tibble}{Link}.

Google. (2022, February 14). Cleaning up gate count statistics.
Google Groups. Retrieved September 26, 2022,
\href{https://groups.google.com/a/arl.org/g/arl-assess/c/JQyllZN4gaE}{Link}.
}
\author{
Anjali Silva, \email{anjali@alumni.uoguelph.ca}
}
