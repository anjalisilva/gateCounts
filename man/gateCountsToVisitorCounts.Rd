% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gateCountsCalculation.R
\name{gateCountsToVisitorCounts}
\alias{gateCountsToVisitorCounts}
\title{Calculates Daily Visitor Counts From Raw Daily Gate Counts}
\usage{
gateCountsToVisitorCounts(
  rawGateCounts,
  gateType = "Unidirectional",
  gatecounterMaxValue = 999999,
  printMessages = TRUE
)
}
\arguments{
\item{rawGateCounts}{A numeric vector or a tibble, with number of rows
equaling to length of days and columns equaling to two, such that
the dimension is: days x 2. Here days is the number of days for
which raw gate counts are present. First column must contain the
dates and should contain column name "dates". Dates must be in the
format of date-month-year. The second column must contain the gate
count reading for the given date and should be called "counts".}

\item{gateType}{A character string with options "Unidirectional" or
"Bidirectional", to indicate gate type. If the gate is one-way only,
then enter "Unidirectional". If the gate permits visitors in and out,
then enter "Bidirectional". Bidirectional selection will lead to
count sum being divided by two. The default value is "Unidirectional".}

\item{gatecounterMaxValue}{A numeric value greater than 0 indicating the
gate counter max value, before it is reset. The default value is
999,999. This number is crucial for calculations.}

\item{printMessages}{A logical indicating TRUE or FALSE as to whether
progress messages should be printed. The default value is TRUE. Setting
to FALSE will remove messages from being shown while function is running.}
}
\value{
Returns an S3 object of class gateCountsToVisitorCounts with results.
\itemize{
  \item dailyVisitorCounts - A table of dates, daily gate counts
        provided by user, and daily visitor counts calculated using
        gate counts adjusted for issues mentioned under details. If
        gateType was "Bidirectional", the visitor count is divided by
        two and ceiling() function from base R is applied.
  \item gateType - Gate type for which counts are provided by the user.
  \item gatecounterMaxValue - User provided value in the argument
        gatecounterMaxValue.
  \item cumulativeVisitorCount - Sum of daily gate counts for the period,
        adjusted for issues mentioned under details. If gateType was
        "Bidirectional", the final resulting number would be divided
        by two.
}
}
\description{
A function that calculates daily and cumulative visitor
counts, provided a numeric vector or a tibble containing values
of raw daily gate counts and date with a specific format (see argument
details or README file). The function adjusts for several factors
outlined under details (see README file for examples). This function
was developed to improve current methodologies for calculating visitor
counts from raw gate counts.
}
\details{
The function requires directionality of the gates for which
   the daily counts are provided (called gate type). If unidirectional
   no adjustments are done. If bidirectional, the cumulative sum at
   the end will be divided by two. Testing has shown that this method
   of dividing at the end will help reduce issues with counts
   that result from division of daily counts by two and rounding up or
   down. Further, negative counts can result during calculation if
   the counter has reset or if a lower value has been entered compared
   to previous day. This function attempts to correct for both scenarios.
   In the case of counter reset, the 'gatecounterMaxValue' argument
   provided by the user will be used to calculate the corrected value.
   In the case of a lower value being entered compared to previous day,
   the negative value will be replaced by NA. For next day, the count is
   calculated by the numeric value previously reported prior to NA, that
   must be higher than current value. The function also ensure counts
   for empty cells (when the count was forgotten to be reported) are
   accounted for. All scenarios are explained with images on the tutorial.
}
\examples{

set.seed(1234)
# Example 1: Unidirectional gates with daily counts
# Simulate gate count data using Poisson distribution
randomCounts1 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                  200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# Create a tibble with date information
randomCounts1tibble <- tibble::tibble(
                        dates = seq(lubridate::dmy('01-01-2022'),
                        lubridate::dmy('31-12-2022'),
                        by='1 day')[1:length(randomCounts1)] \%>\%
                        format('\%d-\%m-\%Y'),
                        counts = randomCounts1)

# Check max value for gate counter maximum
max(randomCounts1tibble$counts, na.rm = TRUE) # 200000

# Run gateCountsToVisitorCounts function
randomCountsEx1 <- gateCountsToVisitorCounts(
             rawGateCounts = randomCounts1tibble,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000,
             printMessages = FALSE)

randomCountsEx1$dailyVisitorCounts # access daily adjusted counts
randomCountsEx1$cumulativeVisitorCount # cumulative count for duration
randomCountsEx1$gatecounterMaxValue  # gate counter maximum
randomCountsEx1$gateType # type of gate

# Example 2: Unidirectional gates with random NA values
# Simulate gate count data using Poisson distribution
randomCounts2 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                  200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# Randomly introduce NA and "Gate broken" entries
randomPositions <- sample(x = c(1:length(randomCounts2)),
                         size = 8, replace = FALSE)
randomCounts2[randomPositions[1:4]] <- NA
randomCounts2[randomPositions[5:8]] <- "Gate broken"

# Create a tibble with date information
randomCounts2tibble <- tibble::tibble(
                        dates = seq(lubridate::dmy('01-01-2022'),
                        lubridate::dmy('31-12-2022'),
                        by='1 day')[1:length(randomCounts2)] \%>\%
                        format('\%d-\%m-\%Y'),
                        counts = randomCounts2)

# Check max value for gate counter maximum
max(as.numeric(randomCounts2tibble$counts), na.rm = TRUE) # 200000

# Run gateCountsToVisitorCounts function
randomCountsEx2 <- gateCountsToVisitorCounts(
             rawGateCounts = randomCounts2tibble,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000,
             printMessages = FALSE)

randomCountsEx2$dailyVisitorCounts # access daily adjusted counts
randomCountsEx2$cumulativeVisitorCount # cumulative count for duration
randomCountsEx2$gatecounterMaxValue  # gate counter maximum
randomCountsEx2$gateType # type of gate



# Example 3: Unidirectional gates with random entry errors
# Simulate gate count data using Poisson distribution
randomCounts3 <- c(sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 82, lambda = 100000)),
                       200000, # max value
                  sort(rpois(n = 50, lambda = 100)),
                  sort(rpois(n = 50, lambda = 1000)),
                  sort(rpois(n = 50, lambda = 100000)))

# Randomly introduce smaller counts
randomPositions <- sample(x = c(1:length(randomCounts3)),
                         size = 4, replace = FALSE)
randomCounts3[randomPositions] <- randomCounts3[randomPositions[1:4]] - 10

# Create a tibble with date information
randomCounts3tibble <- tibble::tibble(
                        dates = seq(lubridate::dmy('01-01-2022'),
                        lubridate::dmy('31-12-2022'),
                        by='1 day')[1:length(randomCounts3)] \%>\%
                        format('\%d-\%m-\%Y'),
                        counts = randomCounts3)

# Check max value for gate counter maximum
max(as.numeric(randomCounts3tibble$counts), na.rm = TRUE) # 200000

# Run gateCountsToVisitorCounts function
randomCountsEx3 <- gateCountsToVisitorCounts(
             rawGateCounts = randomCounts3tibble,
             gateType = "Unidirectional",
             gatecounterMaxValue = 200000,
             printMessages = FALSE)


randomCountsEx3$dailyVisitorCounts # access daily adjusted counts
randomCountsEx3$cumulativeVisitorCount # cumulative count for duration
randomCountsEx3$gatecounterMaxValue  # gate counter maximum
randomCountsEx3$gateType # type of gate


# Example 4: Bidirectional gates with NA values
# Simulate gate count data using Poisson distribution
randomCounts4 <- c(sort(rpois(n = 50, lambda = 10000)),
                  sort(rpois(n = 50, lambda = 400000)),
                  sort(rpois(n = 82, lambda = 800000)),
                  999999, # max value
                  sort(rpois(n = 50, lambda = 10000)),
                  sort(rpois(n = 50, lambda = 450000)),
                  sort(rpois(n = 50, lambda = 850000)))

# Randomly introduce NA and "Gate broken" entries
randomPositions <- sample(x = c(1:length(randomCounts4)),
                         size = 8, replace = FALSE)
randomCounts4[randomPositions[1:4]] <- NA
randomCounts4[randomPositions[5:8]] <- "Gate broken"

# Create a tibble with date information
randomCounts4tibble <- tibble::tibble(
                        dates = seq(lubridate::dmy('01-01-2022'),
                        lubridate::dmy('31-12-2022'),
                        by='1 day')[1:length(randomCounts4)] \%>\%
                        format('\%d-\%m-\%Y'),
                        counts = randomCounts4)

# Check max value for gate counter maximum
max(as.numeric(randomCounts4tibble$counts), na.rm = TRUE) # 999999

# Run gateCountsToVisitorCounts function
randomCountsEx4 <- gateCountsToVisitorCounts(
             rawGateCounts = randomCounts4tibble,
             gateType = "Unidirectional",
             gatecounterMaxValue = 999999,
             printMessages = FALSE)

randomCountsEx4$dailyVisitorCounts # access daily adjusted counts
randomCountsEx4$cumulativeVisitorCount # cumulative count for duration
randomCountsEx4$gatecounterMaxValue  # gate counter maximum
randomCountsEx4$gateType # type of gate


}
\references{
Müller K, Wickham H (2022). _tibble: Simple Data Frames_. R
package version 3.1.8, \href{https://CRAN.R-project.org/package=tibble}{Link}.

Google. (2022, February 14). Cleaning up gate count statistics.
Google Groups. Retrieved September 26, 2022,
\href{https://groups.google.com/a/arl.org/g/arl-assess/c/JQyllZN4gaE}{Link}.
}
\author{
Anjali Silva, \email{anjali@alumni.uoguelph.ca}
}
